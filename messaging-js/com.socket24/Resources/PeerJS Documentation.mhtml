From: <Saved by Blink>
Snapshot-Content-Location: https://peerjs.com/docs.html#start
Subject: PeerJS Documentation
Date: Mon, 28 Sep 2020 16:38:13 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--k8mxQ8bV3DWcPnRs4jsePUkXCXP9HxjgayCHJcb47I----"


------MultipartBoundary--k8mxQ8bV3DWcPnRs4jsePUkXCXP9HxjgayCHJcb47I----
Content-Type: text/html
Content-ID: <frame-A645B34D1D7DC38098A3EC6C68C3EFFA@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://peerjs.com/docs.html#start

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8">
  <title>PeerJS Documentation</title>
  <meta name=3D"viewport" content=3D"width=3Ddevice-width, maximum-scale=3D=
1">
  <link href=3D"https://fonts.googleapis.com/css?family=3DLato:300,400,700,=
900" rel=3D"stylesheet" type=3D"text/css">
  <link href=3D"https://peerjs.com/css/docs.css" rel=3D"stylesheet" type=3D=
"text/css">
 =20
 =20
</head>

<body style=3D"">
  <section class=3D"start">
    <h1>
      <a href=3D"https://peerjs.com/">PeerJS</a>
      <span class=3D"title">docs</span>
    </h1>
    <p>
      <br>PeerJS simplifies peer-to-peer data, video, and audio calls.</p>
    <p>This guide will show you the basic concepts of the PeerJS API.</p>
    <h2>Setup</h2>
    <h3>1. Include the Javascript client</h3>
    <p>Add the PeerJS client library to your webpage.</p>
    <pre>&lt;script src=3D"https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.j=
s"&gt;&lt;/script&gt;</pre>
    <p>If you prefer, you can host it yourself:
      <a download=3D"" href=3D"https://unpkg.com/peerjs@1.3.1/dist/peerjs.m=
in.js">peerjs.min.js</a>, or
      <a href=3D"https://github.com/peers/peerjs">fork us on Github</a>.</p=
>
    <h3>2. Create the Peer object</h3>
    <p>The Peer object is where we create and receive connections.</p>
    <pre>var peer =3D new Peer();</pre>
    <p>PeerJS uses PeerServer for session
      metadata and candidate signaling. You can also
      <a href=3D"https://github.com/peers/peerjs-server">run your own PeerS=
erver</a> if you don't like the cloud.</p>
    <p>We're now ready to start making connections!</p>

    <h2>Usage</h2>
    <p>Every Peer object is assigned a random, unique ID when it's created.=
</p>
    <pre>peer.on('open', function(id) {
  console.log('My peer ID is: ' + id);
});</pre>
    <p>When we want to connect to another peer, we'll need to know their pe=
er id. You're in charge of communicating the
      peer
      IDs between users of your site. Optionally, you can pass in your own =
IDs to the
      <a href=3D"https://peerjs.com/docs.html#peer">
        <code>Peer</code> constructor
      </a>.</p>

    <p>Read the
      <a href=3D"https://peerjs.com/docs.html#peer">Peer API reference</a> =
for complete information on its
      <a href=3D"https://peerjs.com/docs.html#peer-options">options</a>, me=
thods,
      <a href=3D"https://peerjs.com/docs.html#peeron">events</a>, and
      <a href=3D"https://peerjs.com/docs.html#peeron-error">error handling<=
/a>.</p>

    <h3>Data connections</h3>
    <p>Start a data connection by calling
      <code>peer.connect</code> with the peer ID of the destination peer. A=
nytime another peer attempts to connect to
      your peer ID, you'll receive
      a
      <code>connection</code> event. </p>
    <div class=3D"two-col">
      <div class=3D"col col-header">Start connection</div>
      <div class=3D"col col-header">Receive connection</div>
      <div class=3D"col">
        <pre>var conn =3D peer.connect('dest-peer-id');</pre>
      </div>
      <div class=3D"col">
        <pre>peer.on('connection', function(conn) { ... });</pre>
      </div>
      <div class=3D"clear"></div>
    </div>
    <p>
      <code>peer.connect</code> and the callback of the
      <code>connection</code> event will both provide a
      <code>DataConnection</code> object. This object will allow you to sen=
d and receive data:</p>
    <pre>conn.on('open', function() {
  // Receive messages
  conn.on('data', function(data) {
    console.log('Received', data);
  });

  // Send messages
  conn.send('Hello!');
});</pre>
    <p>Read the
      <a href=3D"https://peerjs.com/docs.html#dataconnection">DataConnectio=
n API reference</a> for complete details on its methods and events.</p>
    <h3>Video/audio calls</h3>
    <p>Call another peer by calling
      <code>peer.call</code> with the peer ID of the destination peer. When=
 a peer calls you, the
      <code>call</code> event is emitted.</p>
    <p>Unlike data connections, when receiving a
      <code>call</code> event, the call must be answered or no connection i=
s established.</p>
    <div class=3D"two-col">
      <div class=3D"col col-header">Start call</div>
      <div class=3D"col col-header">Answer call</div>
      <div class=3D"col">
        <pre>// Call a peer, providing our mediaStream
var call =3D peer.call('dest-peer-id',
  mediaStream);

</pre>
      </div>
      <div class=3D"col">
        <pre>peer.on('call', function(call) {
  // Answer the call, providing our mediaStream
  call.answer(mediaStream);
});</pre>
      </div>
      <div class=3D"clear"></div>
    </div>
    <p>When calling or answering a call, a MediaStream should be provided. =
The MediaStream represents the local video
      (webcam)
      or audio stream and can be obtained with some (browser-specific) vers=
ion of
      <a href=3D"https://developer.mozilla.org/en-US/docs/Web/API/Navigator=
.getUserMedia">
        <code>navigator.getUserMedia</code>
      </a>. When answering a call, the MediaStream is optional and if none =
is provided then a one-way call is
      established.
      Once the call is established, its
      <code>open</code> property is set to true.</p>
    <p>
      <code>peer.call</code> and the callback of the
      <code>call</code> event provide a MediaConnection object. The MediaCo=
nnection object itself emits a
      <code>stream</code> event whose callback includes the video/audio str=
eam of the other peer.</p>
    <pre>call.on('stream', function(stream) {
  // `stream` is the MediaStream of the remote peer.
  // Here you'd add it to an HTML video/canvas element.
});</pre>
    <p>Read the
      <a href=3D"https://peerjs.com/docs.html#mediaconnection">MediaConnect=
ion API reference</a> for complete details on its methods and events.</p>

    <h2>Common questions</h2>

    <h3>What kind of data can I send?</h3>

    <p>PeerJS has the
      <a href=3D"https://github.com/binaryjs/js-binarypack">BinaryPack</a>
      serialization format built-in. This means you can send any JSON type =
as well as binary Blobs and ArrayBuffers.
      Simply send
      arbitrary data and you'll get it out the other side:</p>
    <pre>conn.send({
  strings: 'hi!',
  numbers: 150,
  arrays: [1,2,3],
  evenBinary: new Blob([1,2,3]),
  andMore: {bool: true}
});</pre>

    <h3>Are there any caveats?</h3>

    <p>A small percentage of users are behind symmetric NATs. When two symm=
etric NAT users try to connect to each other,
      NAT
      traversal is impossible and no connection can be made. A workaround i=
s to proxy through the connection through a
      TURN
      server. The PeerServer cloud service provides a free TURN server. Thi=
s will allow your PeerJS app to work
      seamlessly for this situation</p>
    <h3>How do I use a TURN server?</h3>
    <p>When creating your Peer object, pass in the ICE servers as the confi=
g key of the options hash.</p>
    <pre>var peer =3D new Peer({
  config: {'iceServers': [
    { url: 'stun:stun.l.google.com:19302' },
    { url: 'turn:homeo@turn.bistri.com:80', credential: 'homeo' }
  ]} /* Sample servers, please use appropriate ones */
});
</pre>
    <h3>What if my peer has not yet connected to the server when I attempt =
to connect to it?</h3>

    <p>When you try to connect to a peer, PeerServer will hold a connection=
 offer for up to 5 seconds before rejecting
      it. This
      is useful if you want to reconnect to a peer as it disconnects and re=
connects rapidly between web pages.</p>

    <h3>Why am I unable to connect?</h3>
    <p>You could be behind a symmetric NAT, in which case you'll need to se=
t up a TURN server.</p>
    <p>Another possible issue is your network blocking port 443, which the =
PeerServer cloud runs on. In this you must
      use your
      own PeerServer running on an appropriate port instead of the cloud se=
rvice.</p>

    <h3>What about latency/bandwidth?</h3>

    <p>Data sent between the two peers do not touch any other servers, so t=
he connection speed is limited only by the
      upload
      and download rates of the two peers. This also means you don't have t=
he additional latency of an intermediary
      server.</p>
    <p>The latency to establish a connection can be split into two componen=
ts: the brokering of data and the
      identification
      of clients. PeerJS has been designed to minimize the time you spend i=
n these two areas. For brokering, data is
      sent
      through an XHR streaming request before a WebSocket connection is est=
ablished, then through WebSockets. For client
      identification, we provide you the ability to pass in your own peer I=
Ds, thus eliminating the RTT for retrieving
      an
      ID from the server.</p>

    <h3>More questions?</h3>
    <p>
      <a href=3D"https://t.me/joinchat/ENhPuhTvhm8WlIxTjQf7Og">Discuss Peer=
JS on our Telegram channel.</a>
      <br>
      <br>
    </p>
  </section>

  <header class=3D"left">
    <h2>API Reference
      <a class=3D"hide icon">=C2=AB</a>
      <a class=3D"show icon" style=3D"display: none;">=C2=BB</a>
    </h2>
  </header>
  <header class=3D"right">
    <h2>Getting Started</h2>
  </header>

  <section class=3D"api">
    <div class=3D"toplevel " id=3D"peer"><span class=3D"name"><a href=3D"ht=
tps://peerjs.com/docs.html#peer">Peer</a><span class=3D"tag type constructo=
r">constructor</span><span class=3D"snippet">const peer =3D new Peer([id],
          [options]);</span></span>
      <p class=3D"description">A peer can connect to other peers and listen=
 for connections.</p>
      <div class=3D"children">
        <div class=3D"child " id=3D"peer-id"><span class=3D"name"><a href=
=3D"https://peerjs.com/docs.html#peer-id"><span class=3D"optional"><span cl=
ass=3D"bracket">[</span>id<span class=3D"bracket">]</span></span></a><span =
class=3D"tag type string">string</span></span>
          <p class=3D"description">Other peers can connect to this peer usi=
ng the provided ID. If no ID is given, one will
            be generated by the brokering server. The ID must start and end=
 with an alphanumeric character (lower or
            upper case character or a digit). In the middle of the ID space=
s, dashes (-) and underscores (_) are
            allowed.<span class=3D"warn">It's not recommended that you use =
this ID to identify peers, as it's meant to be
              used for brokering connections only. You're recommended to se=
t the <a href=3D"https://peerjs.com/docs.html#peerconnect-options"><code>me=
tadata</code></a> option to send other identifying
              information.</span></p>
        </div>
        <div class=3D"child " id=3D"peer-options"><span class=3D"name"><a h=
ref=3D"https://peerjs.com/docs.html#peer-options"><span class=3D"optional">=
<span class=3D"bracket">[</span>options<span class=3D"bracket">]</span></sp=
an></a><span class=3D"tag type object">object</span></span>
          <div class=3D"children">
            <div class=3D"child " id=3D"peer-options-key"><span class=3D"na=
me"><a href=3D"https://peerjs.com/docs.html#peer-options-key">key</a><span =
class=3D"tag type string">string</span></span>
              <p class=3D"description">API key for the cloud PeerServer. Th=
is is not used for servers other than
                <code>0.peerjs.com</code>.<span class=3D"warn">PeerServer c=
loud runs on port 443. Please ensure it is not
                  blocked or consider running your own PeerServer instead.<=
/span></p>
            </div>
            <div class=3D"child " id=3D"peer-options-host"><span class=3D"n=
ame"><a href=3D"https://peerjs.com/docs.html#peer-options-host">host</a><sp=
an class=3D"tag type string">string</span></span>
              <p class=3D"description">Server host. Defaults to <code>0.pee=
rjs.com</code>. Also accepts <code>'/'</code>
                to signify relative hostname.</p>
            </div>
            <div class=3D"child " id=3D"peer-options-port"><span class=3D"n=
ame"><a href=3D"https://peerjs.com/docs.html#peer-options-port">port</a><sp=
an class=3D"tag type number">number</span></span>
              <p class=3D"description">Server port. Defaults to <code>443</=
code>.</p>
            </div>
            <div class=3D"child " id=3D"peer-options-pinginterval"><span cl=
ass=3D"name"><a href=3D"https://peerjs.com/docs.html#peer-options-pinginter=
val">pingInterval</a><span class=3D"tag type number">number</span></span>
              <p class=3D"description">Ping interval in ms. Defaults to <co=
de>5000</code>.</p>
            </div>
            <div class=3D"child " id=3D"peer-options-path"><span class=3D"n=
ame"><a href=3D"https://peerjs.com/docs.html#peer-options-path">path</a><sp=
an class=3D"tag type string">string</span></span>
              <p class=3D"description">The path where your self-hosted Peer=
Server is running. Defaults to
                <code>'/'</code>.</p>
            </div>
            <div class=3D"child " id=3D"peer-options-secure"><span class=3D=
"name"><a href=3D"https://peerjs.com/docs.html#peer-options-secure">secure<=
/a><span class=3D"tag type boolean">boolean</span></span>
              <p class=3D"description"><code>true</code> if you're using SS=
L.<span class=3D"tip">Note that our cloud-hosted
                  server and assets may not support SSL.</span></p>
            </div>
            <div class=3D"child " id=3D"peer-options-config"><span class=3D=
"name"><a href=3D"https://peerjs.com/docs.html#peer-options-config">config<=
/a><span class=3D"tag type object">object</span></span>
              <p class=3D"description">Configuration hash passed to RTCPeer=
Connection. This hash contains any custom
                ICE/TURN server configuration. Defaults to
                <code>{ 'iceServers': [{ 'urls': 'stun:stun.l.google.com:19=
302' }], 'sdpSemantics': 'unified-plan' }</code>
              </p>
            </div>
            <div class=3D"child " id=3D"peer-options-debug"><span class=3D"=
name"><a href=3D"https://peerjs.com/docs.html#peer-options-debug">debug</a>=
<span class=3D"tag type number">number</span></span>
              <p class=3D"description">Prints log messages depending on the=
 debug level passed in. Defaults to
                <code>0</code>.</p>
              <div class=3D"children">
                <div class=3D"child " id=3D"peer-options-debug-0"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#peer-options-debug-0">0=
</a></span>
                  <p class=3D"description">Prints no logs.</p>
                </div>
                <div class=3D"child " id=3D"peer-options-debug-1"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#peer-options-debug-1">1=
</a></span>
                  <p class=3D"description">Prints only errors.</p>
                </div>
                <div class=3D"child " id=3D"peer-options-debug-2"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#peer-options-debug-2">2=
</a></span>
                  <p class=3D"description">Prints errors and warnings.</p>
                </div>
                <div class=3D"child " id=3D"peer-options-debug-3"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#peer-options-debug-3">3=
</a></span>
                  <p class=3D"description">Prints all logs.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class=3D"toplevel " id=3D"peerconnect"><span class=3D"name"><a hre=
f=3D"https://peerjs.com/docs.html#peerconnect">peer.connect</a><span class=
=3D"tag type method">method</span><span class=3D"snippet">const <a href=3D"=
https://peerjs.com/docs.html#dataconnection">dataConnection</a>
          =3D peer.connect(id, [options]);</span></span>
      <p class=3D"description">Connects to the remote peer specified by <co=
de>id</code> and returns a data connection. Be
        sure to listen on the <a href=3D"https://peerjs.com/docs.html#peero=
n-error"><code>error</code></a> event in case the connection fails.</p>
      <div class=3D"children">
        <div class=3D"child " id=3D"peerconnect-id"><span class=3D"name"><a=
 href=3D"https://peerjs.com/docs.html#peerconnect-id">id</a><span class=3D"=
tag type string">string</span></span>
          <p class=3D"description">The brokering ID of the remote peer (the=
ir <a href=3D"https://peerjs.com/docs.html#peerid"><code>peer.id</code></a>=
).
          </p>
        </div>
        <div class=3D"child " id=3D"peerconnect-options"><span class=3D"nam=
e"><a href=3D"https://peerjs.com/docs.html#peerconnect-options"><span class=
=3D"optional"><span class=3D"bracket">[</span>options<span class=3D"bracket=
">]</span></span></a><span class=3D"tag type object">object</span></span>
          <div class=3D"children">
            <div class=3D"child " id=3D"peerconnect-options-label"><span cl=
ass=3D"name"><a href=3D"https://peerjs.com/docs.html#peerconnect-options-la=
bel">label</a><span class=3D"tag type string">string</span></span>
              <p class=3D"description">A unique label by which you want to =
identify this data connection. If left
                unspecified, a label will be generated at random. Can be ac=
cessed with <a href=3D"https://peerjs.com/docs.html#dataconnection-label"><=
code>dataConnection.label</code></a>.</p>
            </div>
            <div class=3D"child " id=3D"peerconnect-options-metadata"><span=
 class=3D"name"><a href=3D"https://peerjs.com/docs.html#peerconnect-options=
-metadata">metadata</a></span>
              <p class=3D"description">Metadata associated with the connect=
ion, passed in by whoever initiated the
                connection. Can be accessed with <a href=3D"https://peerjs.=
com/docs.html#dataconnection-metadata"><code>dataConnection.metadata</code>=
</a>. Can be any serializable
                type.</p>
            </div>
            <div class=3D"child " id=3D"peerconnect-options-serialization">=
<span class=3D"name"><a href=3D"https://peerjs.com/docs.html#peerconnect-op=
tions-serialization">serialization</a><span class=3D"tag type string">strin=
g</span></span>
              <p class=3D"description">Can be <code>binary</code> (default)=
, <code>binary-utf8</code>, <code>json</code>,
                or <code>none</code>. Can be accessed with <a href=3D"https=
://peerjs.com/docs.html#dataconnection-serialization"><code>dataConnection.=
serialization</code></a>.<span class=3D"tip"><code>binary-utf8</code> will =
take a performance hit because of the way UTF8 strings are
                  packed into binary format.</span></p>
            </div>
            <div class=3D"child " id=3D"peerconnect-options-reliable"><span=
 class=3D"name"><a href=3D"https://peerjs.com/docs.html#peerconnect-options=
-reliable">reliable</a><span class=3D"tag type boolean">boolean</span></spa=
n>
              <p class=3D"description">Whether the underlying data channels=
 should be reliable (e.g. for large file
                transfers) or not (e.g. for gaming or streaming). Defaults =
to <code>false</code>.<span class=3D"warn">Setting reliable to true will us=
e a shim for incompatible browsers (Chrome 30 and below
                  only) and thus may not offer full performance.</span></p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class=3D"toplevel " id=3D"peercall"><span class=3D"name"><a href=
=3D"https://peerjs.com/docs.html#peercall">peer.call</a><span class=3D"tag =
type method">method</span><span class=3D"snippet">const <a href=3D"https://=
peerjs.com/docs.html#mediaconnection">mediaConnection</a> =3D peer.call(id,=
 stream, [options]);</span></span>
      <p class=3D"description">Calls the remote peer specified by <code>id<=
/code> and returns a media connection. Be sure
        to listen on the <a href=3D"https://peerjs.com/docs.html#peeron-err=
or"><code>error</code></a> event in case the connection fails.</p>
      <div class=3D"children">
        <div class=3D"child " id=3D"peercall-id"><span class=3D"name"><a hr=
ef=3D"https://peerjs.com/docs.html#peercall-id">id</a><span class=3D"tag ty=
pe string">string</span></span>
          <p class=3D"description">The brokering ID of the remote peer (the=
ir <a href=3D"https://peerjs.com/docs.html#peerid"><code>peer.id</code></a>=
).
          </p>
        </div>
        <div class=3D"child " id=3D"peercall-stream"><span class=3D"name"><=
a href=3D"https://peerjs.com/docs.html#peercall-stream">stream</a><span cla=
ss=3D"tag type MediaStream">MediaStream</span></span>
          <p class=3D"description">The caller's media stream</p>
        </div>
        <div class=3D"child " id=3D"peercall-options"><span class=3D"name">=
<a href=3D"https://peerjs.com/docs.html#peercall-options"><span class=3D"op=
tional"><span class=3D"bracket">[</span>options<span class=3D"bracket">]</s=
pan></span></a><span class=3D"tag type object">object</span></span>
          <div class=3D"children">
            <div class=3D"child " id=3D"peercall-options-metadata"><span cl=
ass=3D"name"><a href=3D"https://peerjs.com/docs.html#peercall-options-metad=
ata">metadata</a></span>
              <p class=3D"description">Metadata associated with the connect=
ion, passed in by whoever initiated the
                connection. Can be accessed with <a href=3D"https://peerjs.=
com/docs.html#mediaconnection-metadata"><code>mediaConnection.metadata</cod=
e></a>. Can be any serializable
                type.</p>
            </div>
            <div class=3D"child " id=3D"peercall-options-sdptransform"><spa=
n class=3D"name"><a href=3D"https://peerjs.com/docs.html#peercall-options-s=
dptransform">sdpTransform</a><span class=3D"tag type method">method</span><=
/span>
              <p class=3D"description">Function which runs before create of=
fer to modify sdp offer message.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class=3D"toplevel " id=3D"peeron"><span class=3D"name"><a href=3D"=
https://peerjs.com/docs.html#peeron">peer.on</a><span class=3D"tag type met=
hod">method</span><span class=3D"snippet">peer.on(event, callback);</span><=
/span>
      <p class=3D"description">Set listeners for peer events.</p>
      <div class=3D"children">
        <div class=3D"child " id=3D"peeron-open"><span class=3D"name"><a hr=
ef=3D"https://peerjs.com/docs.html#peeron-open">'open'</a><span class=3D"ta=
g type event">event</span><span class=3D"snippet">peer.on('open', function(=
id) { ...
              });</span></span>
          <p class=3D"description">Emitted when a connection to the PeerSer=
ver is established. You may use the peer before
            this is emitted, but messages to the server will be queued. <co=
de>id</code> is the brokering ID of the peer
            (which was either provided in the constructor or assigned by th=
e server).<span class=3D"tip">You should not
              wait for this event before connecting to other peers if conne=
ction speed is important.</span></p>
        </div>
        <div class=3D"child " id=3D"peeron-connection"><span class=3D"name"=
><a href=3D"https://peerjs.com/docs.html#peeron-connection">'connection'</a=
><span class=3D"tag type event">event</span><span class=3D"snippet">peer.on=
('connection', function(<a href=3D"https://peerjs.com/docs.html#dataconnect=
ion">dataConnection</a>) { ... });</span></span>
          <p class=3D"description">Emitted when a new data connection is es=
tablished from a remote peer.</p>
        </div>
        <div class=3D"child " id=3D"peeron-call"><span class=3D"name"><a hr=
ef=3D"https://peerjs.com/docs.html#peeron-call">'call'</a><span class=3D"ta=
g type event">event</span><span class=3D"snippet">peer.on('call', function(=
<a href=3D"https://peerjs.com/docs.html#mediaconnection">mediaConnection</a=
>) { ... });</span></span>
          <p class=3D"description">Emitted when a remote peer attempts to c=
all you. The emitted
            <code>mediaConnection</code> is not yet active; you must first =
answer the call (<a href=3D"https://peerjs.com/docs.html#mediaconnection-an=
swer"><code>mediaConnection.answer([stream]);</code></a>). Then, you can li=
sten
            for the <a href=3D"https://peerjs.com/docs.html#mediaconnection=
-on"><code>stream</code></a> event.</p>
        </div>
        <div class=3D"child " id=3D"peeron-close"><span class=3D"name"><a h=
ref=3D"https://peerjs.com/docs.html#peeron-close">'close'</a><span class=3D=
"tag type event">event</span><span class=3D"snippet">peer.on('close', funct=
ion() { ...
              });</span></span>
          <p class=3D"description">Emitted when the peer is <a href=3D"http=
s://peerjs.com/docs.html#peerdestroy">destroyed</a> and can no longer accep=
t
            or create any new connections. At this time, the peer's connect=
ions will all be closed. <span class=3D"tip">To
              be extra certain that peers clean up correctly, we recommend =
calling <code>peer.destroy()</code> on a peer
              when it is no longer needed.</span></p>
        </div>
        <div class=3D"child " id=3D"peeron-disconnected"><span class=3D"nam=
e"><a href=3D"https://peerjs.com/docs.html#peeron-disconnected">'disconnect=
ed'</a><span class=3D"tag type event">event</span><span class=3D"snippet">p=
eer.on('disconnected', function() { ... });</span></span>
          <p class=3D"description">Emitted when the peer is disconnected fr=
om the signalling server, either <a href=3D"https://peerjs.com/docs.html#pe=
erdisconnect">manually</a> or because the connection to the signalling serv=
er was lost. When a
            peer is disconnected, its existing connections will stay alive,=
 but the peer cannot accept or create any new
            connections. You can reconnect to the server by calling <a href=
=3D"https://peerjs.com/docs.html#peerreconnect"><code>peer.reconnect()</cod=
e></a>.</p>
        </div>
        <div class=3D"child " id=3D"peeron-error"><span class=3D"name"><a h=
ref=3D"https://peerjs.com/docs.html#peeron-error">'error'</a><span class=3D=
"tag type event">event</span><span class=3D"snippet">peer.on('error', funct=
ion(err) { ...
              });</span></span>
          <p class=3D"description">Errors on the peer are <strong>almost al=
ways fatal</strong> and will destroy the peer.
            Errors from the underlying socket and PeerConnections are forwa=
rded here.<br><br>These come in the following
            <code>err.type</code> flavors:</p>
          <div class=3D"children">
            <div class=3D"child fatal " id=3D"peeron-error-browser-incompat=
ible"><span class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-e=
rror-browser-incompatible">'browser-incompatible'</a><span class=3D"tag typ=
e Error">Error</span><span class=3D"tag fatal">fatal</span></span>
              <p class=3D"description">The client's browser does not suppor=
t some or all WebRTC features that you are
                trying to use.</p>
            </div>
            <div class=3D"child " id=3D"peeron-error-disconnected"><span cl=
ass=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-disconnec=
ted">'disconnected'</a><span class=3D"tag type Error">Error</span></span>
              <p class=3D"description">You've already disconnected this pee=
r from the server and can no longer make any
                new connections on it.</p>
            </div>
            <div class=3D"child fatal " id=3D"peeron-error-invalid-id"><spa=
n class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-inval=
id-id">'invalid-id'</a><span class=3D"tag type Error">Error</span><span cla=
ss=3D"tag fatal">fatal</span></span>
              <p class=3D"description">The ID passed into the Peer construc=
tor contains illegal characters.</p>
            </div>
            <div class=3D"child fatal " id=3D"peeron-error-invalid-key"><sp=
an class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-inva=
lid-key">'invalid-key'</a><span class=3D"tag type Error">Error</span><span =
class=3D"tag fatal">fatal</span></span>
              <p class=3D"description">The API key passed into the Peer con=
structor contains illegal characters or is not
                in the system (cloud server only).</p>
            </div>
            <div class=3D"child " id=3D"peeron-error-network"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-network">'ne=
twork'</a><span class=3D"tag type Error">Error</span></span>
              <p class=3D"description">Lost or cannot establish a connectio=
n to the signalling server.</p>
            </div>
            <div class=3D"child " id=3D"peeron-error-peer-unavailable"><spa=
n class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-peer-=
unavailable">'peer-unavailable'</a><span class=3D"tag type Error">Error</sp=
an></span>
              <p class=3D"description">The peer you're trying to connect to=
 does not exist.</p>
            </div>
            <div class=3D"child fatal " id=3D"peeron-error-ssl-unavailable"=
><span class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-=
ssl-unavailable">'ssl-unavailable'</a><span class=3D"tag type Error">Error<=
/span><span class=3D"tag fatal">fatal</span></span>
              <p class=3D"description">PeerJS is being used securely, but t=
he cloud server does not support SSL. Use a
                custom PeerServer.</p>
            </div>
            <div class=3D"child fatal " id=3D"peeron-error-server-error"><s=
pan class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-ser=
ver-error">'server-error'</a><span class=3D"tag type Error">Error</span><sp=
an class=3D"tag fatal">fatal</span></span>
              <p class=3D"description">Unable to reach the server.</p>
            </div>
            <div class=3D"child fatal " id=3D"peeron-error-socket-error"><s=
pan class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-soc=
ket-error">'socket-error'</a><span class=3D"tag type Error">Error</span><sp=
an class=3D"tag fatal">fatal</span></span>
              <p class=3D"description">An error from the underlying socket.=
</p>
            </div>
            <div class=3D"child fatal " id=3D"peeron-error-socket-closed"><=
span class=3D"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-so=
cket-closed">'socket-closed'</a><span class=3D"tag type Error">Error</span>=
<span class=3D"tag fatal">fatal</span></span>
              <p class=3D"description">The underlying socket closed unexpec=
tedly.</p>
            </div>
            <div class=3D"child sometimes_fatal " id=3D"peeron-error-unavai=
lable-id"><span class=3D"name"><a href=3D"https://peerjs.com/docs.html#peer=
on-error-unavailable-id">'unavailable-id'</a><span class=3D"tag type Error"=
>Error</span><span class=3D"tag sometimes_fatal">sometimes fatal</span></sp=
an>
              <p class=3D"description">The ID passed into the Peer construc=
tor is already taken.<span class=3D"warn">This
                  error is not fatal if your peer has open peer-to-peer con=
nections. This can happen if you attempt to
                  <a href=3D"https://peerjs.com/docs.html#peerreconnect">re=
connect</a> a peer that has been <a href=3D"https://peerjs.com/docs.html#pe=
erdisconnect">disconnected
                    from the server</a>, but its old ID has now been taken.=
</span></p>
            </div>
            <div class=3D"child " id=3D"peeron-error-webrtc"><span class=3D=
"name"><a href=3D"https://peerjs.com/docs.html#peeron-error-webrtc">'webrtc=
'</a><span class=3D"tag type Error">Error</span></span>
              <p class=3D"description">Native WebRTC errors.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class=3D"toplevel " id=3D"peerdisconnect"><span class=3D"name"><a =
href=3D"https://peerjs.com/docs.html#peerdisconnect">peer.disconnect</a><sp=
an class=3D"tag type method">method</span><span class=3D"snippet">peer.disc=
onnect();</span></span>
      <p class=3D"description">Close the connection to the server, leaving =
all existing data and media connections intact.
        <a href=3D"https://peerjs.com/docs.html#peerdisconnected"><code>pee=
r.disconnected</code></a> will be set to <code>true</code> and the <a href=
=3D"https://peerjs.com/docs.html#peeron-disconnected"><code>disconnected</c=
ode></a> event will fire.<span class=3D"warn">This cannot be
          undone; the respective peer object will no longer be able to crea=
te or receive any connections and its ID will
          be forfeited on the (cloud) server.</span></p>
    </div>
    <div class=3D"toplevel " id=3D"peerreconnect"><span class=3D"name"><a h=
ref=3D"https://peerjs.com/docs.html#peerreconnect">peer.reconnect</a><span =
class=3D"tag type method">method</span><span class=3D"snippet">peer.reconne=
ct();</span></span>
      <p class=3D"description">Attempt to reconnect to the server with the =
peer's old ID. Only <a href=3D"https://peerjs.com/docs.html#peerdisconnect"=
>disconnected peers</a> can be reconnected. Destroyed peers cannot be recon=
nected. If
        the connection fails (as an example, if the peer's old ID is now ta=
ken), the peer's existing connections will
        not close, but any associated errors events will fire.</p>
    </div>
    <div class=3D"toplevel " id=3D"peerdestroy"><span class=3D"name"><a hre=
f=3D"https://peerjs.com/docs.html#peerdestroy">peer.destroy</a><span class=
=3D"tag type method">method</span><span class=3D"snippet">peer.destroy();</=
span></span>
      <p class=3D"description">Close the connection to the server and termi=
nate all existing connections. <a href=3D"https://peerjs.com/docs.html#peer=
destroyed"><code>peer.destroyed</code></a> will be set to <code>true</code>=
.<span class=3D"warn">This
          cannot be undone; the respective peer object will no longer be ab=
le to create or receive any connections, its
          ID will be forfeited on the (cloud) server, and all of its data a=
nd media connections will be closed.</span>
      </p>
    </div>
    <div class=3D"toplevel " id=3D"peerid"><span class=3D"name"><a href=3D"=
https://peerjs.com/docs.html#peerid">peer.id</a><span class=3D"tag type str=
ing">string</span></span>
      <p class=3D"description">The brokering ID of this peer. If no ID was =
specified in <a href=3D"https://peerjs.com/docs.html#peer">the
          constructor</a>, this will be <code>undefined</code> until the <a=
 href=3D"https://peerjs.com/docs.html#peeron-open"><code>open</code></a>
        event is emitted.</p>
    </div>
    <div class=3D"toplevel " id=3D"peerconnections"><span class=3D"name"><a=
 href=3D"https://peerjs.com/docs.html#peerconnections">peer.connections</a>=
<span class=3D"tag type object">object</span></span>
      <p class=3D"description">A hash of all connections associated with th=
is peer, keyed by the remote peer's ID.<span class=3D"tip">We recommend kee=
ping track of connections yourself rather than relying on this hash.</span>=
</p>
    </div>
    <div class=3D"toplevel " id=3D"peerdisconnected"><span class=3D"name"><=
a href=3D"https://peerjs.com/docs.html#peerdisconnected">peer.disconnected<=
/a><span class=3D"tag type boolean">boolean</span></span>
      <p class=3D"description"><code>false</code> if there is an active con=
nection to the PeerServer.</p>
    </div>
    <div class=3D"toplevel " id=3D"peerdestroyed"><span class=3D"name"><a h=
ref=3D"https://peerjs.com/docs.html#peerdestroyed">peer.destroyed</a><span =
class=3D"tag type boolean">boolean</span></span>
      <p class=3D"description"><code>true</code> if this peer and all of it=
s connections can no longer be used.</p>
    </div>
    <div class=3D"toplevel " id=3D"dataconnection"><span class=3D"name"><a =
href=3D"https://peerjs.com/docs.html#dataconnection">DataConnection</a><spa=
n class=3D"tag type class">class</span></span>
      <p class=3D"description">Wraps WebRTC's DataChannel. To get one, use =
<a href=3D"https://peerjs.com/docs.html#peerconnect"><code>peer.connect</co=
de></a> or listen for the <a href=3D"https://peerjs.com/docs.html#peeron-co=
nnect"><code>connect</code></a> event.</p>
      <div class=3D"children">
        <div class=3D"child " id=3D"dataconnection-send"><span class=3D"nam=
e"><a href=3D"https://peerjs.com/docs.html#dataconnection-send">.send</a><s=
pan class=3D"tag type method">method</span><span class=3D"snippet">dataConn=
ection.send(data);</span></span>
          <p class=3D"description"><code>data</code> is serialized by Binar=
yPack by default and sent to the remote peer.
          </p>
          <div class=3D"children">
            <div class=3D"child " id=3D"dataconnection-send-data"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-send-dat=
a">data</a></span>
              <p class=3D"description">You can send any type of data, inclu=
ding objects, strings, and blobs.</p>
            </div>
          </div>
        </div>
        <div class=3D"child " id=3D"dataconnection-close"><span class=3D"na=
me"><a href=3D"https://peerjs.com/docs.html#dataconnection-close">.close</a=
><span class=3D"tag type method">method</span><span class=3D"snippet">dataC=
onnection.close();</span></span>
          <p class=3D"description">Closes the data connection gracefully, c=
leaning up underlying DataChannels and
            PeerConnections.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-on"><span class=3D"name"=
><a href=3D"https://peerjs.com/docs.html#dataconnection-on">.on</a><span cl=
ass=3D"tag type method">method</span><span class=3D"snippet">dataConnection=
.on(event,
              callback);</span></span>
          <p class=3D"description">Set listeners for data connection events=
.</p>
          <div class=3D"children">
            <div class=3D"child " id=3D"dataconnection-on-data"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-on-data">'=
data'</a><span class=3D"tag type event">event</span><span class=3D"snippet"=
>dataConnection.on('data', function(data) { ... });</span></span>
              <p class=3D"description">Emitted when data is received from t=
he remote peer.</p>
            </div>
            <div class=3D"child " id=3D"dataconnection-on-open"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-on-open">'=
open'</a><span class=3D"tag type event">event</span><span class=3D"snippet"=
>dataConnection.on('open', function() { ... });</span></span>
              <p class=3D"description">Emitted when the connection is estab=
lished and ready-to-use.</p>
            </div>
            <div class=3D"child " id=3D"dataconnection-on-close"><span clas=
s=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-on-close"=
>'close'</a><span class=3D"tag type event">event</span><span class=3D"snipp=
et">dataConnection.on('close', function() { ... });</span></span>
              <p class=3D"description">Emitted when either you or the remot=
e peer closes the data connection.<span class=3D"warn">Firefox does not yet=
 support this event.</span></p>
            </div>
            <div class=3D"child " id=3D"dataconnection-on-error"><span clas=
s=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-on-error"=
>'error'</a><span class=3D"tag type event">event</span><span class=3D"snipp=
et">dataConnection.on('error', function(err) { ... });</span></span></div>
          </div>
        </div>
        <div class=3D"child " id=3D"dataconnection-datachannel"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-datachanne=
l">.dataChannel</a><span class=3D"tag type object">object</span></span>
          <p class=3D"description">A reference to the RTCDataChannel object=
 associated with the connection.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-label"><span class=3D"na=
me"><a href=3D"https://peerjs.com/docs.html#dataconnection-label">.label</a=
><span class=3D"tag type string">string</span></span>
          <p class=3D"description">The optional label passed in or assigned=
 by PeerJS when the connection was initiated.
          </p>
        </div>
        <div class=3D"child " id=3D"dataconnection-metadata"><span class=3D=
"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-metadata">.me=
tadata</a></span>
          <p class=3D"description">Any type of metadata associated with the=
 connection, passed in by whoever initiated the
            connection.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-open"><span class=3D"nam=
e"><a href=3D"https://peerjs.com/docs.html#dataconnection-open">.open</a><s=
pan class=3D"tag type boolean">boolean</span></span>
          <p class=3D"description">This is true if the connection is open a=
nd ready for read/write.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-peerconnection"><span cl=
ass=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-peercon=
nection">.peerConnection</a><span class=3D"tag type object">object</span></=
span>
          <p class=3D"description">A reference to the RTCPeerConnection obj=
ect associated with the connection.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-peer"><span class=3D"nam=
e"><a href=3D"https://peerjs.com/docs.html#dataconnection-peer">.peer</a><s=
pan class=3D"tag type string">string</span></span>
          <p class=3D"description">The ID of the peer on the other end of t=
his connection.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-reliable"><span class=3D=
"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-reliable">.re=
liable</a><span class=3D"tag type boolean">boolean</span></span>
          <p class=3D"description">Whether the underlying data channels are=
 reliable; defined when the connection was
            initiated.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-serialization"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-serializ=
ation">.serialization</a><span class=3D"tag type string">string</span></spa=
n>
          <p class=3D"description">The serialization format of the data sen=
t over the connection. Can be
            <code>binary</code> (default), <code>binary-utf8</code>, <code>=
json</code>, or <code>none</code>.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-type"><span class=3D"nam=
e"><a href=3D"https://peerjs.com/docs.html#dataconnection-type">.type</a><s=
pan class=3D"tag type string">string</span></span>
          <p class=3D"description">For data connections, this is always <co=
de>'data'</code>.</p>
        </div>
        <div class=3D"child " id=3D"dataconnection-buffersize"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#dataconnection-buffersize=
">.bufferSize</a><span class=3D"tag type number">number</span></span>
          <p class=3D"description">The number of messages queued to be sent=
 once the browser buffer is no longer full.</p>
        </div>
      </div>
    </div>
    <div class=3D"toplevel " id=3D"mediaconnection"><span class=3D"name"><a=
 href=3D"https://peerjs.com/docs.html#mediaconnection">MediaConnection</a><=
span class=3D"tag type class">class</span></span>
      <p class=3D"description">Wraps WebRTC's media streams. To get one, us=
e <a href=3D"https://peerjs.com/docs.html#peercall"><code>peer.call</code><=
/a> or listen for the <a href=3D"https://peerjs.com/docs.html#peeron-call">=
<code>call</code></a>
        event.</p>
      <div class=3D"children">
        <div class=3D"child " id=3D"mediaconnection-answer"><span class=3D"=
name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-answer">.answ=
er</a><span class=3D"tag type method">method</span><span class=3D"snippet">=
mediaConnection.answer([stream],[options]);</span></span>
          <p class=3D"description">When receiving a <a href=3D"https://peer=
js.com/docs.html#peeron-call"><code>call</code></a> event on a peer, you ca=
n
            call <code>.answer</code> on the media connection provided by t=
he callback to accept the call and optionally
            send your own media stream.</p>
          <div class=3D"children">
            <div class=3D"child " id=3D"mediaconnection-answer-stream"><spa=
n class=3D"name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-an=
swer-stream"><span class=3D"optional"><span class=3D"bracket">[</span>strea=
m<span class=3D"bracket">]</span></span></a><span class=3D"tag type MediaSt=
ream">MediaStream</span></span>
              <p class=3D"description">A WebRTC media stream from <a href=
=3D"https://developer.mozilla.org/en-US/docs/Web/API/Navigator.getUserMedia=
"><code>getUserMedia</code></a>.
              </p>
            </div>
            <div class=3D"child " id=3D"mediaconnection-answer-options"><sp=
an class=3D"name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-a=
nswer-options"><span class=3D"optional"><span class=3D"bracket">[</span>opt=
ions<span class=3D"bracket">]</span></span></a><span class=3D"tag type obje=
ct">object</span></span>
              <div class=3D"children">
                <div class=3D"child " id=3D"mediaconnection-answer-options-=
sdptransform"><span class=3D"name"><a href=3D"https://peerjs.com/docs.html#=
mediaconnection-answer-options-sdptransform">sdpTransform</a><span class=3D=
"tag type method">method</span></span>
                  <p class=3D"description">Function which runs before creat=
e answer to modify sdp answer message.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class=3D"child " id=3D"mediaconnection-close"><span class=3D"n=
ame"><a href=3D"https://peerjs.com/docs.html#mediaconnection-close">.close<=
/a><span class=3D"tag type method">method</span><span class=3D"snippet">med=
iaConnection.close();</span></span>
          <p class=3D"description">Closes the media connection.</p>
        </div>
        <div class=3D"child " id=3D"mediaconnection-on"><span class=3D"name=
"><a href=3D"https://peerjs.com/docs.html#mediaconnection-on">.on</a><span =
class=3D"tag type method">method</span><span class=3D"snippet">mediaConnect=
ion.on(event,
              callback);</span></span>
          <p class=3D"description">Set listeners for media connection event=
s.</p>
          <div class=3D"children">
            <div class=3D"child " id=3D"mediaconnection-on-stream"><span cl=
ass=3D"name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-on-str=
eam">'stream'</a><span class=3D"tag type event">event</span><span class=3D"=
snippet">mediaConnection.on('stream', function(stream) { ... });</span></sp=
an>
              <p class=3D"description">Emitted when a remote peer adds a <c=
ode>stream</code>.</p>
            </div>
            <div class=3D"child " id=3D"mediaconnection-on-close"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-on-clos=
e">'close'</a><span class=3D"tag type event">event</span><span class=3D"sni=
ppet">mediaConnection.on('close', function() { ... });</span></span>
              <p class=3D"description">Emitted when either you or the remot=
e peer closes the media connection. <span class=3D"warn">Firefox does not y=
et support this event.</span></p>
            </div>
            <div class=3D"child " id=3D"mediaconnection-on-error"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-on-erro=
r">'error'</a><span class=3D"tag type event">event</span><span class=3D"sni=
ppet">mediaConnection.on('error', function(err) { ... });</span></span></di=
v>
          </div>
        </div>
        <div class=3D"child " id=3D"mediaconnection-open"><span class=3D"na=
me"><a href=3D"https://peerjs.com/docs.html#mediaconnection-open">.open</a>=
<span class=3D"tag type boolean">boolean</span></span>
          <p class=3D"description">Whether the media connection is active (=
e.g. your call has been answered). You can
            check this if you want to set a maximum wait time for a one-sid=
ed call.</p>
        </div>
        <div class=3D"child " id=3D"mediaconnection-metadata"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#mediaconnection-metadata"=
>.metadata</a></span>
          <p class=3D"description">Any type of metadata associated with the=
 connection, passed in by whoever initiated the
            connection.</p>
        </div>
        <div class=3D"child " id=3D"mediaconnection-peer"><span class=3D"na=
me"><a href=3D"https://peerjs.com/docs.html#mediaconnection-peer">.peer</a>=
<span class=3D"tag type string">string</span></span>
          <p class=3D"description">The ID of the peer on the other end of t=
his connection.</p>
        </div>
        <div class=3D"child " id=3D"mediaconnection-type"><span class=3D"na=
me"><a href=3D"https://peerjs.com/docs.html#mediaconnection-type">.type</a>=
<span class=3D"tag type string">string</span></span>
          <p class=3D"description">For media connections, this is always <c=
ode>'media'</code>.</p>
        </div>
      </div>
    </div>
    <div class=3D"toplevel utility " id=3D"util"><span class=3D"name"><a hr=
ef=3D"https://peerjs.com/docs.html#util">util</a><span class=3D"tag type ob=
ject">object</span><span class=3D"tag utility">utility</span></span>
      <p class=3D"description">Provides a variety of helpful utilities.<spa=
n class=3D"warn">Only the utilities documented
          here are guaranteed to be present on <code>util</code>. Undocumen=
ted utilities can be removed without warning.
          We don't consider these to be 'breaking changes.'</span></p>
      <div class=3D"children">
        <div class=3D"child " id=3D"util-browser"><span class=3D"name"><a h=
ref=3D"https://peerjs.com/docs.html#util-browser">.browser</a><span class=
=3D"tag type string">string</span><span class=3D"snippet">if (util.browser =
=3D=3D=3D 'Firefox') { /* OK to peer
              with Firefox peers. */ }</span></span>
          <p class=3D"description">The current browser. This property can b=
e useful in determining whether or not two
            peers can connect. For example, as of now data connections are =
not yet interoperable between major browsers.
            <code>util.browser</code> can currently have the values 'Firefo=
x', 'Chrome', 'Unsupported', or 'Supported'
            (unknown WebRTC-compatible browser).</p>
        </div>
        <div class=3D"child " id=3D"util-supports"><span class=3D"name"><a =
href=3D"https://peerjs.com/docs.html#util-supports">.supports</a><span clas=
s=3D"tag type object">object</span><span class=3D"snippet">if (util.support=
s.data) { /* OK to start a data
              connection. */ }</span></span>
          <p class=3D"description">A hash of WebRTC features mapped to bool=
eans that correspond to whether the feature is
            supported by the current browser.<span class=3D"warn">Only the =
properties documented here are guaranteed to be
              present on <code>util.supports</code>.</span></p>
          <div class=3D"children">
            <div class=3D"child " id=3D"util-supports-audiovideo"><span cla=
ss=3D"name"><a href=3D"https://peerjs.com/docs.html#util-supports-audiovide=
o">.audioVideo</a><span class=3D"tag type boolean">boolean</span></span>
              <p class=3D"description">True if the current browser supports=
 media streams and PeerConnection.</p>
            </div>
            <div class=3D"child " id=3D"util-supports-data"><span class=3D"=
name"><a href=3D"https://peerjs.com/docs.html#util-supports-data">.data</a>=
<span class=3D"tag type boolean">boolean</span></span>
              <p class=3D"description">True if the current browser supports=
 DataChannel and PeerConnection.</p>
            </div>
            <div class=3D"child " id=3D"util-supports-binary"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#util-supports-binary">.bi=
nary</a><span class=3D"tag type boolean">boolean</span></span>
              <p class=3D"description">True if the current browser supports=
 binary DataChannels.</p>
            </div>
            <div class=3D"child " id=3D"util-supports-reliable"><span class=
=3D"name"><a href=3D"https://peerjs.com/docs.html#util-supports-reliable">.=
reliable</a><span class=3D"tag type boolean">boolean</span></span>
              <p class=3D"description">True if the current browser supports=
 reliable DataChannels.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>


</body></html>
------MultipartBoundary--k8mxQ8bV3DWcPnRs4jsePUkXCXP9HxjgayCHJcb47I----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Lato:300,400,700,900

@charset "utf-8";

@font-face { font-family: Lato; font-style: normal; font-weight: 300; src: =
local("Lato Light"), local("Lato-Light"), url("https://fonts.gstatic.com/s/=
lato/v17/S6u9w4BMUTPHh7USSwaPGR_p.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 300; src: =
local("Lato Light"), local("Lato-Light"), url("https://fonts.gstatic.com/s/=
lato/v17/S6u9w4BMUTPHh7USSwiPGQ.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; src: =
local("Lato Regular"), local("Lato-Regular"), url("https://fonts.gstatic.co=
m/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 700; src: =
local("Lato Bold"), local("Lato-Bold"), url("https://fonts.gstatic.com/s/la=
to/v17/S6u9w4BMUTPHh6UVSwaPGR_p.woff2") format("woff2"); unicode-range: U+1=
00-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C6=
0-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 700; src: =
local("Lato Bold"), local("Lato-Bold"), url("https://fonts.gstatic.com/s/la=
to/v17/S6u9w4BMUTPHh6UVSwiPGQ.woff2") format("woff2"); unicode-range: U+0-F=
F, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U=
+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 900; src: =
local("Lato Black"), local("Lato-Black"), url("https://fonts.gstatic.com/s/=
lato/v17/S6u9w4BMUTPHh50XSwaPGR_p.woff2") format("woff2"); unicode-range: U=
+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2=
C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 900; src: =
local("Lato Black"), local("Lato-Black"), url("https://fonts.gstatic.com/s/=
lato/v17/S6u9w4BMUTPHh50XSwiPGQ.woff2") format("woff2"); unicode-range: U+0=
-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074,=
 U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--k8mxQ8bV3DWcPnRs4jsePUkXCXP9HxjgayCHJcb47I----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://peerjs.com/css/docs.css

@charset "utf-8";

html { color: rgb(0, 0, 0); background: rgb(255, 255, 255); }

body, div, dl, dt, dd, ul, ol, li, pre, code, form, fieldset, legend, input=
, button, textarea, p, blockquote, th, td { margin: 0px; padding: 0px; }

table { border-collapse: collapse; border-spacing: 0px; }

fieldset, img { border: 0px; }

address, caption, cite, code, dfn, em, th, var, optgroup { font-style: inhe=
rit; font-weight: inherit; }

del, ins { text-decoration: none; }

li { list-style: none; }

caption, th { text-align: left; }

q::before, q::after { content: ""; }

abbr, acronym { border: 0px; font-variant: normal; }

sup { vertical-align: baseline; }

sub { vertical-align: baseline; }

legend { color: rgb(0, 0, 0); }

input, button, textarea, select, optgroup, option { font-family: inherit; f=
ont-size: inherit; font-style: inherit; font-weight: inherit; }

input, button, textarea, select { font-size: 100%; }

a { outline: none; }

a img { border: none; }

body, html { font-size: 14px; line-height: 24px; font-family: Lato, Helveti=
ca, sans-serif; color: rgb(69, 69, 69); }

header.right, header.left { cursor: pointer; z-index: 100; position: fixed;=
 top: 0px; height: 35px; box-sizing: border-box; }

header.left { border-bottom: 1px solid rgba(0, 0, 0, 0.1); border-right: 4p=
x solid rgba(0, 0, 0, 0.1); background-color: rgb(80, 72, 78); text-align: =
right; left: 0px; width: 47%; }

header.right { border-bottom: 1px solid rgba(0, 0, 0, 0.1); border-left: 4p=
x solid rgba(0, 0, 0, 0.1); background-color: rgb(238, 238, 238); text-alig=
n: left; right: 0px; width: 53%; }

.left h2, .right h2 { color: rgb(226, 166, 46); letter-spacing: 1px; text-t=
ransform: uppercase; font-size: 14px; margin: 0px; padding: 6px 10px; text-=
shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; }

.right h2 { color: rgb(90, 81, 87); text-shadow: rgb(255, 255, 255) 0px -1p=
x 0px; }

.left .icon { color: rgb(226, 166, 46); cursor: pointer; font-family: monos=
pace; font-size: 20px; display: inline-block; margin-left: 5px; }

.icon.show { display: none; }

.api, .start { position: absolute; top: 0px; bottom: 0px; overflow: hidden =
scroll; box-sizing: border-box; transition: left 300ms ease 0s; }

.api.fullscreen { width: 100%; }

.start.full { left: 30px; width: auto; }

.api.hidden { left: -370px; width: 400px; overflow: hidden; }

.api.hidden > div { opacity: 0.6; }

.start { background-color: rgb(252, 252, 252); width: 53%; right: 0px; top:=
 35px; text-shadow: rgb(255, 255, 255) 0px -1px 0px; border-top: 1px solid =
rgb(255, 255, 255); z-index: 99; color: rgb(100, 91, 97); }

.start h1 { margin: 0px; background-color: rgb(255, 255, 255); font-size: 4=
0px; line-height: 40px; padding: 30px 20px; border-bottom: 1px solid rgb(23=
8, 238, 238); color: rgb(90, 81, 87); border-left: 4px solid rgb(221, 221, =
221); }

section.start pre { font-family: Consolas, Inconsolata, "Bitstream Vera San=
s Mono", Menlo, Monaco, "Andale Mono", "Courier New", monospace; font-size:=
 12px; background-color: rgb(71, 64, 69); border-left: 4px solid rgb(64, 57=
, 62); padding: 15px 30px 15px 40px; color: rgb(231, 224, 229); text-shadow=
: rgba(0, 0, 0, 0.1) 0px -1px 0px; max-width: 100%; overflow: auto; }

h1 a { color: rgb(90, 81, 87); text-decoration: none; transition: color 300=
ms ease 0s; }

h1 a:hover { color: rgb(116, 94, 109); }

h1 .title { color: rgb(255, 255, 255); display: inline-block; font-size: 15=
px; text-transform: uppercase; font-variant: small-caps; background-color: =
rgb(226, 166, 46); padding: 2px 4px; line-height: 15px; border-radius: 2px;=
 border: 2px solid rgba(0, 0, 0, 0.2); text-shadow: rgba(0, 0, 0, 0.2) 0px =
-1px 0px; }

.start > p, .start > div { padding: 5px 30px 5px 40px; border-left: 4px sol=
id rgb(221, 221, 221); }

.start p.red { color: rgb(143, 69, 55); }

.start h2, .start h3, .start h4 { color: rgb(90, 81, 87); padding: 12px 25p=
x 5px; margin: 0px; font-size: 20px; border-left: 4px solid rgb(204, 204, 2=
04); }

.start h3 { font-size: 15px; padding: 12px 25px 5px; border-bottom: 1px sol=
id rgb(238, 238, 238); }

a { font-weight: 600; color: rgb(18, 149, 216); text-decoration: none; tran=
sition: color 200ms ease 0s; }

a:hover { color: rgb(51, 162, 220); }

.api { color: rgb(245, 239, 243); font-weight: 300; top: 35px; left: 0px; w=
idth: 47%; border-right: 4px solid rgb(71, 64, 70); border-top: 1px solid r=
gba(255, 255, 255, 0.1); background-color: rgb(90, 81, 87); text-shadow: rg=
b(71, 64, 69) 0px -1px 0px; z-index: 100; }

.child { padding: 10px 0px 10px 15px; }

.bracket { font-weight: 800; display: inline-block; margin: 0px 2px; color:=
 rgba(255, 255, 255, 0.2); }

.toplevel { border-bottom: 1px solid rgba(0, 0, 0, 0.1); padding: 30px 35px=
; }

.api:not(:first-child) { border-top: 1px solid rgba(255, 255, 255, 0.1); }

.toplevel > .children > .child { padding-right: 5px; }

.children { border-left: 1px solid rgba(0, 0, 0, 0.1); }

.beta_030 .children { border-left: 1px solid rgba(233, 97, 81, 0.5); }

.api div p { margin: 0px 0px 5px; }

.child:hover { background-color: rgb(99, 89, 96); }

.tag { display: inline-block; background-color: rgb(69, 69, 69); border-rad=
ius: 2px; color: rgba(255, 255, 255, 0.8); line-height: 11px; padding: 1px =
2px; margin-left: 5px; font-size: 9px; letter-spacing: 1px; font-weight: 60=
0; font-family: Lato, Helvetica, sans-serif; text-transform: uppercase; bor=
der: 1px solid rgba(0, 0, 0, 0.4); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px=
 0px; }

.tag.type { background-color: rgb(117, 126, 43); }

.tag.beta_030 { background-color: rgb(233, 97, 81); }

.tag.method, .tag.function { background-color: rgb(226, 166, 46); }

.tag.class, .tag.constructor, .tag.utility { background-color: rgb(70, 143,=
 129); }

.tag.error { background-color: rgb(143, 69, 55); }

.tag.event { background-color: rgb(18, 149, 216); }

.toplevel > .name { font-size: 20px; }

.api .snippet { color: rgb(162, 148, 157); border-width: 1px; border-style:=
 solid; border-color: rgb(64, 57, 62) rgb(107, 102, 106) rgb(107, 102, 106)=
 rgb(64, 57, 62); text-shadow: rgb(57, 52, 56) 0px -1px 0px; font-size: 12p=
x; font-family: Consolas, Inconsolata, "Bitstream Vera Sans Mono", Menlo, M=
onaco, "Andale Mono", "Courier New", monospace; font-weight: 400; display: =
inline-block; background-color: rgb(71, 64, 69); padding: 3px 8px; margin: =
5px 0px 0px 10px; }

.api .name { font-weight: 600; display: inline-block; margin-bottom: 5px; }

.name a { cursor: pointer; color: rgb(255, 255, 255); text-decoration: none=
; transition: color 300ms ease 0s; }

.name a:hover { color: rgb(231, 224, 229); }

.tip, .warn { opacity: 0.9; display: block; background-color: rgb(209, 199,=
 190); font-size: 13px; line-height: 18px; border-radius: 2px; padding: 5px=
 8px; border: 2px solid rgba(0, 0, 0, 0.2); margin: 8px 8px 0px 0px; }

.warn { background-color: rgb(143, 69, 55); }

.tip { color: rgb(84, 78, 74); text-shadow: rgba(255, 255, 255, 0.2) 0px -1=
px 0px; font-weight: 600; }

#peer-options-debug .child { padding: 0px 15px; }

#peer-options-debug .child .description { display: inline-block; margin-lef=
t: 10px; }

.start code, .api code { font-family: Consolas, Inconsolata, "Bitstream Ver=
a Sans Mono", Menlo, Monaco, "Andale Mono", "Courier New", monospace; borde=
r-radius: 2px; border: 1px solid rgba(255, 255, 255, 0.2); background: rgba=
(255, 255, 255, 0.1); font-size: 12px; padding: 2px; }

.start code { background-color: rgb(246, 238, 232); border: 1px solid rgb(2=
09, 199, 190); }

.start > .two-col { padding-left: 0px; padding-right: 0px; }

.two-col .col { float: left; width: 50%; }

.two-col .col.col-header { font-weight: 600; box-sizing: border-box; paddin=
g-left: 20px; padding-right: 20px; }

.clear { clear: both; }
------MultipartBoundary--k8mxQ8bV3DWcPnRs4jsePUkXCXP9HxjgayCHJcb47I------
